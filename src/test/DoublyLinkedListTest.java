package test;

class Node {
	int data;  // 리스트 원소값
	Node llink;  // 왼쪽 링크
	Node rlink;  // 오른쪽 링크
	Node(int data) {
		this.data = data;
		this.llink = null;
		this.rlink = null;
	}
}

public class DoublyLinkedListTest {
	public static void main(String[] args) {
		System.out.println("course5 : 용동중 ");

		// 선형 리스트 list = (22, 33, 44, 55, 66) 를 이중 연결 리스트로 표현
		Node n1 = new Node(22);
		Node n2 = new Node(33);
		Node n3 = new Node(44);
		Node n4 = new Node(55);
		Node n5 = new Node(66);
		n1.rlink = n2;
		n2.llink = n1;
		n2.rlink = n3;
		n3.llink = n2;
		n3.rlink = n4;
		n4.llink = n3;
		n4.rlink = n5;
		n5.llink = n4;
		Node list = n1;
		n1 = n2 = n3 = n4 = n5 = null;

		// 리스트를 왕복 출력
		System.out.print("리스트의 초기 상태:	");
		printList(list);

		// (1) 리스트의 첫번째 원소를 삭제
		/*
			list = list.rlink;
			list.rlink.llink = null;
		 */








		// 리스트를 왕복 출력
		System.out.print("첫번째 원소 삭제 후:	");
		printList(list);

		// (2) 리스트의 맨 앞에 11을 삽입
		/*
		list.llink = new Node(11);
		list.llink.rlink = list;
		list = list.llink;
		list.llink = null;
		 */





		// 리스트를 왕복 출력
		System.out.print("맨 앞에 11 삽입 후:	");
		printList(list);

		System.out.println("======================"); // 1단계는 여기까지임

		// (3) 리스트의 마지막 원소를 삭제







		// 리스트를 왕복 출력
		System.out.print("마지막 원소 삭제 후:	");
		printList(list);

		// (4) 리스트의 맨 뒤에 99를 삽입








		// 리스트를 왕복 출력
		System.out.print("맨 뒤에 99 삽입 후:	");
		printList(list);

		// (5) 전체 원소 합을 구하여 출력







		// 리스트를 왕복 출력
		System.out.print("전체 원소 합 계산 후: ");
		printList(list);
	}

	// list가 가리키는 이중 연결 리스트를 왕복하며 원소들을 순방향, 역방향 출력하는 메소드
	private static void printList(Node list) {
		if(list == null) {
			System.out.println("( ) ( )");
		}
		else {
			System.out.print("( ");
			Node temp = list;
			while(temp.rlink != null) {
				System.out.print(temp.data + " ");
				temp = temp.rlink;
			}
			System.out.print(temp.data + " ) ( ");
			while(temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.llink;
			}
		}
		System.out.println(")");
	}
}

/*
[course5] 이중 연결 리스트
----------------------------------------------------------
이중 연결 리스트로 구현한 정수 리스트를 다루는 프로그램이다.
주석을 참고하여 첨부한 코드의 (1)~(2)를 완성하시오. (1단계)
1단계를 완성한 경우 (3)~(5)를 완성하시오. (2단계)


- 실행 예
course5 : 홍길동

리스트의 초기 상태: ( 22 33 44 55 66 ) ( 66 55 44 33 22 )
첫번째 원소 삭제 후: ( 33 44 55 66 ) ( 66 55 44 33 )
맨 앞에 11 삽입 후: ( 11 33 44 55 66 ) ( 66 55 44 33 11 )
======================
마지막 원소 삭제 후: ( 11 33 44 55 ) ( 55 44 33 11 )
맨 뒤에 99 삽입 후: ( 11 33 44 55 99 ) ( 99 55 44 33 11 )
합 = 242
전체 원소 합 계산 후:  ( 11 33 44 55 99 ) ( 99 55 44 33 11 )

----------------------------------------------------------
목적
- 이중 연결 리스트의 연산을 연습한다.

----------------------------------------------------------
유의사항
- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서
  > java -jar course1.jar
  로 채점합니다. 철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제코드와 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 실행파일: 과제코드.jar 파일
- 소스코드파일: .java 파일


class Node {
 int data;  // 리스트 원소값
 Node llink;  // 왼쪽 링크
 Node rlink;  // 오른쪽 링크
 Node(int data) {
  this.data = data;
  this.llink = null;
  this.rlink = null;
 }
}

public class DoublyLinkedListTest {
 public static void main(String[] args) {
  System.out.println("course5 : 홍길동 ");

  // 선형 리스트 list = (22, 33, 44, 55, 66) 를 이중 연결 리스트로 표현
  Node n1 = new Node(22);
  Node n2 = new Node(33);
  Node n3 = new Node(44);
  Node n4 = new Node(55);
  Node n5 = new Node(66);
  n1.rlink = n2;
  n2.llink = n1;
  n2.rlink = n3;
  n3.llink = n2;
  n3.rlink = n4;
  n4.llink = n3;
  n4.rlink = n5;
  n5.llink = n4;
  Node list = n1;
  n1 = n2 = n3 = n4 = n5 = null;

  // 리스트를 왕복 출력
  System.out.print("리스트의 초기 상태:	");
  printList(list);

  // (1) 리스트의 첫번째 원소를 삭제







  // 리스트를 왕복 출력
  System.out.print("첫번째 원소 삭제 후:	");
  printList(list);

  // (2) 리스트의 맨 앞에 11을 삽입







  // 리스트를 왕복 출력
  System.out.print("맨 앞에 11 삽입 후:	");
  printList(list);

  System.out.println("======================"); // 1단계는 여기까지임

  // (3) 리스트의 마지막 원소를 삭제







  // 리스트를 왕복 출력
  System.out.print("마지막 원소 삭제 후:	");
  printList(list);

  // (4) 리스트의 맨 뒤에 99를 삽입








  // 리스트를 왕복 출력
  System.out.print("맨 뒤에 99 삽입 후:	");
  printList(list);

  // (5) 전체 원소 합을 구하여 출력







  // 리스트를 왕복 출력
  System.out.print("전체 원소 합 계산 후: ");
  printList(list);
 }

 // list가 가리키는 이중 연결 리스트를 왕복하며 원소들을 순방향, 역방향 출력하는 메소드
 private static void printList(Node list) {
  if(list == null) {
   System.out.println("( ) ( )");
  }
  else {
   System.out.print("( ");
   Node temp = list;
   while(temp.rlink != null) {
    System.out.print(temp.data + " ");
    temp = temp.rlink;
   }
   System.out.print(temp.data + " ) ( ");
   while(temp != null) {
    System.out.print(temp.data + " ");
    temp = temp.llink;
   }
  }
  System.out.println(")");
 }
}
 */